
        // D·ªØ li·ªáu menu v·ªõi ƒë∆∞·ªùng d·∫´n ·∫£nh
        const menuItems = [
            {
                id: 1,
                name: 'M·ª≥ Cay',
                price: 45000,
                description: 'M·ª≥ cay H√†n Qu·ªëc v·ªõi nhi·ªÅu c·∫•p ƒë·ªô cay',
                image: 'https://food.ibin.vn/images/data/product/mi-kim-chi-hai-san/mi-kim-chi-hai-san-002.jpg',
                badge: 'B√°n ch·∫°y'
            },
            {
                id: 2,
                name: 'B√∫n B√≤',
                price: 55000,
                description: 'B√∫n b√≤ Hu·∫ø ƒë·∫∑c tr∆∞ng, ƒë·∫≠m ƒë√†',
                image: 'https://i2.ex-cdn.com/crystalbay.com/files/content/2024/08/15/bun-bo-hue-6-0935.jpeg'
            },
            {
                id: 3,
                name: 'B√°nh Canh',
                price: 50000,
                description: 'B√°nh canh cua th∆°m ngon',
                image: 'https://www.cleanipedia.com/images/5iwkm8ckyw6v/6ZzmagCQkHADBgZ1QvYO4F/3f6ceffac0e9f93f3667a3be7d23b835/dG9uZy1ob3AtMy1jYWNoLW5hdS1iYW5oLWNhbmgtY3VhLW5nb24tYmF0LWJhaS1jdWMtaGFwLWRhbi10YWktbmhhLmpwZw/1200w/b%C3%A1t-s%C3%BAp-h%E1%BA%A3i-s%E1%BA%A3n-v%E1%BB%9Bi-cua%2C-m%E1%BB%B1c%2C-v%C3%A0-c%C3%A1c-lo%E1%BA%A1i-th%E1%BB%B1c-ph%E1%BA%A9m-kh%C3%A1c..jpg'
            },
            {
                id: 4,
                name: 'Ph·ªü',
                price: 60000,
                description: 'Ph·ªü b√≤ truy·ªÅn th·ªëng',
                image: 'https://photrang.vn/wp-content/uploads/2025/02/phodacbiet-1608x1080.jpg',
                badge: 'ƒê·∫∑c s·∫£n'
            },
            {
                id: 5,
                name: 'B√∫n Ri√™u',
                price: 55000,
                description: 'B√∫n ri√™u cua ƒë·ªìng th∆°m ngon',
                image: 'https://i.vietgiaitri.com/2022/1/5/bun-rieu-cua-oc-mon-an-mang-dam-huong-vi-truyen-thong-4f4-6251397.jpg'
            },
            {
                id: 6,
                name: 'Nui X√†o B√≤',
                price: 65000,
                description: 'Nui x√†o b√≤ th∆°m ngon, b·ªï d∆∞·ª°ng',
                image: 'https://i.ytimg.com/vi/OhazdED73oc/maxresdefault.jpg'
            },
            {
                id: 7,
                name: 'C∆°m T·∫•m S∆∞·ªùn',
                price: 60000,
                description: 'C∆°m t·∫•m s∆∞·ªùn n∆∞·ªõng ƒë·∫∑c tr∆∞ng S√†i G√≤n',
                image: 'https://static.vinwonders.com/production/com-tam-sai-gon-thumb.jpg',
                badge: 'M·ªõi'
            },
            {
                id: 8,
                name: 'H·ªß Ti·∫øu Nam Vang',
                price: 55000,
                description: 'H·ªß ti·∫øu ki·ªÉu Nam Vang th∆°m ngon',
                image: 'https://i-giadinh.vnecdn.net/2023/05/15/Bc8Thnhphm18-1684125639-9811-1684125654.jpg'
            }
        ];

        // L·∫•y gi·ªè h√†ng t·ª´ localStorage ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a c√≥
        let cart = JSON.parse(localStorage.getItem('foodCart')) || [];

        // C√°c elements
        const cartToggle = document.getElementById('cart-toggle');
        const cartSection = document.getElementById('cart-section');
        const closeCart = document.getElementById('close-cart');
        const overlay = document.getElementById('overlay');
        const cartCount = document.getElementById('cart-count');
        const menuBtn = document.getElementById('menu-btn');
        const reservationBtn = document.getElementById('reservation-btn');
        const backToTopButton = document.getElementById('back-to-top');

        // H√†m chuy·ªÉn ƒë·ªïi trang
        function switchPage(pageId) {
            // ·∫®n t·∫•t c·∫£ c√°c trang
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });

            // Hi·ªÉn th·ªã trang ƒë∆∞·ª£c ch·ªçn
            document.getElementById(pageId).classList.add('active');

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i active cho menu
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });

            // Th√™m class active cho link ƒë∆∞·ª£c ch·ªçn
            document.querySelector(`.nav-link[data-page="${pageId.replace('-page', '')}"]`).classList.add('active');

            // Cu·ªôn l√™n ƒë·∫ßu trang
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }

        // H√†m hi·ªÉn th·ªã menu
        function displayMenu() {
            const menuContainer = document.getElementById('menu-container');
            menuContainer.innerHTML = '';

            menuItems.forEach((item, index) => {
                const foodItem = document.createElement('div');
                foodItem.className = 'food-item animate__animated animate__fadeIn';
                foodItem.style.animationDelay = `${index * 0.1}s`;

                let badgeHTML = '';
                if (item.badge) {
                    badgeHTML = `<div class="food-badge">${item.badge}</div>`;
                }

                foodItem.innerHTML = `
                    ${badgeHTML}
                    <img src="${item.image}" alt="${item.name}" class="food-image">
                    <div class="food-info">
                        <div class="food-name">${item.name}</div>
                        <div class="food-description">${item.description}</div>
                        <div class="food-price">${formatCurrency(item.price)}</div>
                        <button class="add-to-cart" data-id="${item.id}">Th√™m v√†o gi·ªè</button>
                    </div>
                `;
                menuContainer.appendChild(foodItem);
            });

            // Th√™m s·ª± ki·ªán cho c√°c n√∫t "Th√™m v√†o gi·ªè"
            const addButtons = document.querySelectorAll('.add-to-cart');
            addButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const itemId = parseInt(this.getAttribute('data-id'));
                    addToCart(itemId);
                });
            });
        }

        // H√†m hi·ªÉn th·ªã gi·ªè h√†ng
        function displayCart() {
            const cartItems = document.getElementById('cart-items');
            const cartTotal = document.getElementById('cart-total');

            // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng tr√™n bi·ªÉu t∆∞·ª£ng gi·ªè h√†ng
            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            cartCount.textContent = totalItems;

            if (cart.length === 0) {
                cartItems.innerHTML = '<p class="empty-cart">Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng</p>';
                cartTotal.textContent = formatCurrency(0);
                return;
            }

            cartItems.innerHTML = '';
            let total = 0;

            cart.forEach(item => {
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';

                const menuItem = menuItems.find(menuItem => menuItem.id === item.id);
                const itemTotal = menuItem.price * item.quantity;
                total += itemTotal;

                cartItem.innerHTML = `
                    <img src="${menuItem.image}" alt="${menuItem.name}" class="cart-item-image">
                    <div class="cart-item-details">
                        <div class="cart-item-name">${menuItem.name}</div>
                        <div class="cart-item-price">${formatCurrency(menuItem.price)}</div>
                    </div>
                    <div class="cart-item-quantity">
                        <button class="quantity-btn decrease" data-id="${item.id}">-</button>
                        <span class="quantity-display">${item.quantity}</span>
                        <button class="quantity-btn increase" data-id="${item.id}">+</button>
                        <button class="remove-item" data-id="${item.id}">üóëÔ∏è</button>
                    </div>
                `;

                cartItems.appendChild(cartItem);
            });

            cartTotal.textContent = formatCurrency(total);

            // Th√™m s·ª± ki·ªán cho c√°c n√∫t trong gi·ªè h√†ng
            const decreaseButtons = document.querySelectorAll('.decrease');
            const increaseButtons = document.querySelectorAll('.increase');
            const removeButtons = document.querySelectorAll('.remove-item');

            decreaseButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const itemId = parseInt(this.getAttribute('data-id'));
                    updateQuantity(itemId, -1);
                });
            });

            increaseButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const itemId = parseInt(this.getAttribute('data-id'));
                    updateQuantity(itemId, 1);
                });
            });

            removeButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const itemId = parseInt(this.getAttribute('data-id'));
                    removeFromCart(itemId);
                });
            });
        }

        // H√†m th√™m v√†o gi·ªè h√†ng
        function addToCart(itemId) {
            const existingItem = cart.find(item => item.id === itemId);

            if (existingItem) {
                existingItem.quantity += 1;
            } else {
                cart.push({ id: itemId, quantity: 1 });
            }

            saveCart();
            displayCart();

            // Hi·ªáu ·ª©ng th√¥ng b√°o ƒë√£ th√™m v√†o gi·ªè
            const menuItem = menuItems.find(item => item.id === itemId);
            showNotification(`ƒê√£ th√™m ${menuItem.name} v√†o gi·ªè h√†ng!`, 'success');

            // M·ªü gi·ªè h√†ng khi th√™m s·∫£n ph·∫©m
            openCart();
        }

        // H√†m c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
        function updateQuantity(itemId, change) {
            const item = cart.find(item => item.id === itemId);

            if (item) {
                item.quantity += change;

                if (item.quantity <= 0) {
                    removeFromCart(itemId);
                } else {
                    saveCart();
                    displayCart();
                }
            }
        }

        // H√†m x√≥a kh·ªèi gi·ªè h√†ng
        function removeFromCart(itemId) {
            cart = cart.filter(item => item.id !== itemId);
            saveCart();
            displayCart();
        }

        // L∆∞u gi·ªè h√†ng v√†o localStorage
        function saveCart() {
            localStorage.setItem('foodCart', JSON.stringify(cart));
        }

        // ƒê·ªãnh d·∫°ng ti·ªÅn t·ªá
        function formatCurrency(amount) {
            return amount.toLocaleString('vi-VN') + '‚Ç´';
        }

        // M·ªü gi·ªè h√†ng
        function openCart() {
            cartSection.classList.add('active');
            overlay.classList.add('active');
        }

        // ƒê√≥ng gi·ªè h√†ng
        function closeCartFunction() {
            cartSection.classList.remove('active');
            overlay.classList.remove('active');
        }

        // Function t·∫°o m√£ QR thanh to√°n
        function generatePaymentQR(amount, orderInfo) {
            // Th√¥ng tin t√†i kho·∫£n c·ªë ƒë·ªãnh
            const bankCode = "Tpbank";
            const accountNumber = "Totuan6868";
            const accountName = "Qu√°n ƒÇn LyLy";

            // T·∫°o addInfo t·ª´ th√¥ng tin ƒë∆°n h√†ng
            const addInfo = `Thanh toan don hang #${orderInfo.invoiceNumber}`;

            // T·∫°o URL c·ªßa m√£ QR
            const qrUrl = `https://img.vietqr.io/image/${bankCode}-${accountNumber}-compact2.jpg?amount=${amount}&addInfo=${encodeURIComponent(addInfo)}&accountName=${encodeURIComponent(accountName)}`;

            return qrUrl;
        }

        // H√†m hi·ªÉn th·ªã th√¥ng b√°o thay th·∫ø alert
        function showNotification(message, type = 'success', title = '') {
            // X√°c ƒë·ªãnh ti√™u ƒë·ªÅ v√† bi·ªÉu t∆∞·ª£ng d·ª±a tr√™n lo·∫°i th√¥ng b√°o
            let icon = '‚úì';
            if (!title) {
                if (type === 'success') {
                    title = 'Th√†nh c√¥ng';
                    icon = '‚úì';
                } else if (type === 'error') {
                    title = 'L·ªói';
                    icon = '‚úï';
                } else if (type === 'warning') {
                    title = 'C·∫£nh b√°o';
                    icon = '‚ö†';
                } else if (type === 'info') {
                    title = 'Th√¥ng tin';
                    icon = '‚Ñπ';
                }
            }

            // T·∫°o modal
            const modalHTML = `
                <div id="notification-modal" class="notification-modal">
                    <div class="notification-content notification-${type}">
                        <div class="notification-icon">${icon}</div>
                        <div class="notification-title">${title}</div>
                        <div class="notification-message">${message}</div>
                        <button class="notification-button" id="notification-ok">OK</button>
                    </div>
                </div>
            `;

            // Th√™m modal v√†o body
            const modalContainer = document.createElement('div');
            modalContainer.innerHTML = modalHTML;
            document.body.appendChild(modalContainer);

            // Hi·ªÉn th·ªã modal
            const modal = document.getElementById('notification-modal');
            modal.style.display = 'block';

            // X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng modal
            const okButton = document.getElementById('notification-ok');
            okButton.focus(); // Focus v√†o n√∫t OK

            okButton.onclick = function () {
                document.body.removeChild(modalContainer);
            };

            // ƒê√≥ng modal khi nh·∫•n ph√≠m Enter
            document.addEventListener('keydown', function handleEnter(event) {
                if (event.key === 'Enter') {
                    document.body.removeChild(modalContainer);
                    document.removeEventListener('keydown', handleEnter);
                }
            });
        }

        // H√†m x√°c nh·∫≠n thay th·∫ø confirm
        function showConfirmation(message, callback, title = 'X√°c nh·∫≠n') {
            // T·∫°o modal
            const modalHTML = `
                <div id="confirm-modal" class="confirm-modal">
                    <div class="confirm-content">
                        <div class="confirm-title">${title}</div>
                        <div class="confirm-message">${message}</div>
                        <div class="confirm-buttons">
                            <button class="confirm-cancel" id="confirm-cancel">H·ªßy</button>
                            <button class="confirm-ok" id="confirm-ok">ƒê·ªìng √Ω</button>
                        </div>
                    </div>
                </div>
            `;

            // Th√™m modal v√†o body
            const modalContainer = document.createElement('div');
            modalContainer.innerHTML = modalHTML;
            document.body.appendChild(modalContainer);

            // Hi·ªÉn th·ªã modal
            const modal = document.getElementById('confirm-modal');
            modal.style.display = 'block';

            // X·ª≠ l√Ω s·ª± ki·ªán n√∫t
            const cancelButton = document.getElementById('confirm-cancel');
            const okButton = document.getElementById('confirm-ok');

            okButton.focus(); // Focus v√†o n√∫t OK

            cancelButton.onclick = function () {
                document.body.removeChild(modalContainer);
                if (callback) callback(false);
            };

            okButton.onclick = function () {
                document.body.removeChild(modalContainer);
                if (callback) callback(true);
            };

            // X·ª≠ l√Ω ph√≠m t·∫Øt
            document.addEventListener('keydown', function handleKeydown(event) {
                if (event.key === 'Escape') {
                    document.body.removeChild(modalContainer);
                    if (callback) callback(false);
                    document.removeEventListener('keydown', handleKeydown);
                } else if (event.key === 'Enter') {
                    document.body.removeChild(modalContainer);
                    if (callback) callback(true);
                    document.removeEventListener('keydown', handleKeydown);
                }
            });
        }

        // Function hi·ªÉn th·ªã modal thanh to√°n QR
        function showPaymentQRModal(total, orderInfo) {
            // T·∫°o URL m√£ QR
            const qrUrl = generatePaymentQR(total, orderInfo);

            // T·∫°o modal hi·ªÉn th·ªã m√£ QR
            const modalHTML = `
                <div id="payment-modal" class="payment-modal">
                    <div class="payment-modal-content">
                        <span class="close-modal">&times;</span>
                        <h2>Thanh To√°n ƒê∆°n H√†ng</h2>
                        <div class="payment-details">
                            <p><strong>M√£ ƒë∆°n h√†ng:</strong> #${orderInfo.invoiceNumber}</p>
                            <p><strong>T·ªïng ti·ªÅn:</strong> ${formatCurrency(total)}</p>
                            <p><strong>Ng√¢n h√†ng:</strong> TPBank</p>
                            <p><strong>S·ªë t√†i kho·∫£n:</strong> Totuan6868</p>
                            <p><strong>T√™n t√†i kho·∫£n:</strong> ·∫®m Th·ª±c Lyly</p>
                            <p><strong>N·ªôi dung chuy·ªÉn kho·∫£n:</strong> Thanh toan don hang #${orderInfo.invoiceNumber}</p>
                        </div>
                        <div class="qr-container">
                            <img src="${qrUrl}" alt="M√£ QR thanh to√°n" class="payment-qr">
                        </div>
                        <p class="payment-note">Qu√©t m√£ QR b·∫±ng ·ª©ng d·ª•ng ng√¢n h√†ng ƒë·ªÉ thanh to√°n</p>
                        <div class="payment-actions">
                            <button id="complete-order" class="complete-order-btn">ƒê√£ Thanh To√°n</button>
                        </div>
                    </div>
                </div>
            `;

            // Th√™m modal v√†o body
            const modalContainer = document.createElement('div');
            modalContainer.innerHTML = modalHTML;
            document.body.appendChild(modalContainer);

            // Hi·ªÉn th·ªã modal
            const modal = document.getElementById('payment-modal');
            modal.style.display = 'block';

            // X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng modal
            const closeBtn = document.querySelector('.close-modal');
            closeBtn.onclick = function () {
                document.body.removeChild(modalContainer);
            };

            // X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫•n n√∫t ƒë√£ thanh to√°n
            const completeBtn = document.getElementById('complete-order');
            completeBtn.onclick = function () {
                // X√≥a gi·ªè h√†ng
                cart = [];
                saveCart();
                displayCart();

                // ƒê√≥ng modal
                document.body.removeChild(modalContainer);

                // ƒê√≥ng gi·ªè h√†ng
                closeCartFunction();

                // Th√¥ng b√°o c·∫£m ∆°n
                showNotification('ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.', 'success', 'ƒê·∫∑t h√†ng th√†nh c√¥ng');
            };
        }

        // T·∫°o h√≥a ƒë∆°n
        function createInvoice() {
            // Ki·ªÉm tra gi·ªè h√†ng c√≥ tr·ªëng kh√¥ng
            if (cart.length === 0) {
                showNotification('Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!', 'warning');
                return false;
            }

            // L·∫•y th·ªùi gian hi·ªán t·∫°i
            const now = new Date();
            const invoiceNumber = 'INV' + now.getTime().toString().slice(-6);
            const invoiceDate = now.toLocaleDateString('vi-VN');
            const invoiceTime = now.toLocaleTimeString('vi-VN');

            // C·∫≠p nh·∫≠t th√¥ng tin h√≥a ƒë∆°n
            document.getElementById('invoice-number').textContent = invoiceNumber;
            document.getElementById('invoice-date').textContent = invoiceDate;
            document.getElementById('invoice-time').textContent = invoiceTime;

            // T√≠nh t·ªïng ti·ªÅn v√† hi·ªÉn th·ªã c√°c m√≥n ƒÉn
            const invoiceItems = document.getElementById('invoice-items');
            invoiceItems.innerHTML = '';

            let total = 0;

            cart.forEach(item => {
                const menuItem = menuItems.find(menuItem => menuItem.id === item.id);
                const itemTotal = menuItem.price * item.quantity;
                total += itemTotal;

                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${menuItem.name}</td>
                    <td>${formatCurrency(menuItem.price)}</td>
                    <td>${item.quantity}</td>
                    <td>${formatCurrency(itemTotal)}</td>
                `;

                invoiceItems.appendChild(tr);
            });

            document.getElementById('invoice-total').textContent = formatCurrency(total);

            return {
                success: true,
                invoiceNumber: invoiceNumber,
                total: total
            };
        }

        // S·ª± ki·ªán m·ªü/ƒë√≥ng gi·ªè h√†ng
        cartToggle.addEventListener('click', openCart);
        closeCart.addEventListener('click', closeCartFunction);
        overlay.addEventListener('click', closeCartFunction);

        // S·ª± ki·ªán thanh to√°n
        document.getElementById('checkout-btn').addEventListener('click', function () {
            if (cart.length === 0) {
                showNotification('Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!', 'warning');
                return;
            }

            // T√≠nh t·ªïng ti·ªÅn
            const total = cart.reduce((sum, item) => {
                const menuItem = menuItems.find(menuItem => menuItem.id === item.id);
                return sum + (menuItem.price * item.quantity);
            }, 0);

            // T·∫°o th√¥ng tin ƒë∆°n h√†ng
            const now = new Date();
            const orderInfo = {
                invoiceNumber: 'INV' + now.getTime().toString().slice(-6),
                date: now.toLocaleDateString('vi-VN'),
                time: now.toLocaleTimeString('vi-VN')
            };

            // Hi·ªÉn th·ªã modal thanh to√°n QR
            showPaymentQRModal(total, orderInfo);
        });

        // S·ª± ki·ªán chuy·ªÉn trang
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                const pageId = this.getAttribute('data-page') + '-page';
                switchPage(pageId);
            });
        });

        // S·ª± ki·ªán cho c√°c li√™n k·∫øt trong footer
        document.querySelectorAll('.footer-links a').forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                const pageId = this.getAttribute('data-page') + '-page';
                switchPage(pageId);
            });
        });

        // S·ª± ki·ªán cho n√∫t menu v√† ƒë·∫∑t b√†n trong header
        menuBtn.addEventListener('click', function () {
            switchPage('menu-page');
        });

        reservationBtn.addEventListener('click', function () {
            switchPage('reservation-page');
        });

        // S·ª± ki·ªán cho form ƒë·∫∑t b√†n
        document.getElementById('reservation-form').addEventListener('submit', function (e) {
            e.preventDefault();

            // L·∫•y d·ªØ li·ªáu t·ª´ form
            const name = document.getElementById('name').value;
            const phone = document.getElementById('phone').value;
            const date = document.getElementById('date').value;
            const time = document.getElementById('time').value;
            const guests = document.getElementById('guests').value;

            // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n
            // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n
            showNotification(
                `C·∫£m ∆°n ${name} ƒë√£ ƒë·∫∑t b√†n! Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√¥ng tin ƒë·∫∑t b√†n c·ªßa b·∫°n v√†o ng√†y ${date} l√∫c ${time} cho ${guests} ng∆∞·ªùi. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n qua s·ªë ƒëi·ªán tho·∫°i ${phone} ƒë·ªÉ x√°c nh·∫≠n.`,
                'success',
                'ƒê·∫∑t b√†n th√†nh c√¥ng!'
            );

            // Reset form
            this.reset();
        });

        // S·ª± ki·ªán cho form li√™n h·ªá
        document.getElementById('contact-form').addEventListener('submit', function (e) {
            e.preventDefault();

            // L·∫•y d·ªØ li·ªáu t·ª´ form
            const name = document.getElementById('contact-name').value;
            const email = document.getElementById('contact-email').value;

            // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n
            showNotification(
                `C·∫£m ∆°n ${name} ƒë√£ g·ª≠i tin nh·∫Øn cho ch√∫ng t√¥i! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi qua email ${email} trong th·ªùi gian s·ªõm nh·∫•t.`,
                'success',
                'G·ª≠i tin nh·∫Øn th√†nh c√¥ng!'
            );

            // Reset form
            this.reset();
        });

        // S·ª± ki·ªán cho form ƒëƒÉng k√Ω nh·∫≠n tin
        document.querySelector('.newsletter-form').addEventListener('submit', function (e) {
            e.preventDefault();

            const email = this.querySelector('.newsletter-input').value;

            showNotification(
                `C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω nh·∫≠n th√¥ng tin t·ª´ Qu√°n ƒÉn LyLy! Ch√∫ng t√¥i s·∫Ω g·ª≠i c√°c th√¥ng tin khuy·∫øn m√£i v√† m√≥n ƒÉn m·ªõi ƒë·∫øn email ${email}.`,
                'success',
                'ƒêƒÉng k√Ω th√†nh c√¥ng!'
            );

            // Reset form
            this.reset();
        });

        // X·ª≠ l√Ω n√∫t Back to Top
        window.addEventListener('scroll', function () {
            if (window.pageYOffset > 300) {
                backToTopButton.classList.add('visible');
            } else {
                backToTopButton.classList.remove('visible');
            }
        });

        backToTopButton.addEventListener('click', function () {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });

        // Kh·ªüi t·∫°o trang
        displayMenu();
        displayCart();

        // ƒê·∫∑t ng√†y m·∫∑c ƒë·ªãnh cho form ƒë·∫∑t b√†n
        const today = new Date();
        const formattedDate = today.toISOString().split('T')[0];
        if (document.getElementById('date')) {
            document.getElementById('date').min = formattedDate;
            document.getElementById('date').value = formattedDate;
        }

        // X·ª≠ l√Ω animation khi scroll
        function handleScrollAnimations() {
            const elements = document.querySelectorAll('.animate__animated');

            elements.forEach(element => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.2;

                if (elementPosition < screenPosition) {
                    const animationClass = element.classList.contains('animate__fadeIn') ? 'animate__fadeIn' :
                        element.classList.contains('animate__fadeInUp') ? 'animate__fadeInUp' :
                            element.classList.contains('animate__fadeInDown') ? 'animate__fadeInDown' : '';

                    if (animationClass && !element.classList.contains('animated')) {
                        element.classList.add('animated');
                    }
                }
            });
        }

        window.addEventListener('scroll', handleScrollAnimations);
        window.addEventListener('load', handleScrollAnimations);
    
